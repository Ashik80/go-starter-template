package components

import (
	"html/template"
	"net/http"

	"go-starter-template/pkg/csrf"
)

type SignupFormData struct {
	CSRF     template.HTML
	Email    string
	Password string
	Error    struct {
		Email    string
		Password []string
	}
	FormError string
}

func NewSignupFormData(r *http.Request) *SignupFormData {
	return &SignupFormData{
		CSRF: csrf.GetCSRFField(r),
		Error: struct {
			Email    string
			Password []string
		}{
			Password: make([]string, 0),
		},
	}
}

templ SignupForm(form *SignupFormData) {
	<form class="mx-auto mb-4" hx-post="/signup" hx-swap="outerHTML">
		<div class="mb-5">
			@templ.Raw(form.CSRF)
			<label
				for="email"
				class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
			>Your email</label>
			<input
				type="email"
				id="email"
				name="email"
				class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
				placeholder="name@flowbite.com"
				autocomplete="false"
				required
				if form.Email != "" {
					value={ form.Email }
				}
			/>
			if form.Error.Email != "" {
				<p class="text-red-400 mt-2">{ form.Error.Email }</p>
			}
		</div>
		<div class="mb-5">
			<label
				for="password"
				class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
			>Your password</label>
			<div class="relative" x-data="{ show: false }">
				<input
					id="password"
					x-bind:type="show ? 'text' : 'password'"
					type="password"
					name="password"
					class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
					autocomplete="false"
					required
					if form.Password != "" {
						value={ form.Password }
					}
				/>
				<svg
					id="open-eye"
					@click="show = false"
					x-bind:class="show ? '' : 'hidden'"
					class="absolute right-2 top-2 text-gray-900 dark:text-white cursor-pointer"
					xmlns="http://www.w3.org/2000/svg"
					width="24"
					height="24"
					viewBox="0 0 24 24"
					fill="none"
					stroke="currentColor"
					stroke-width="2"
					stroke-linecap="round"
					stroke-linejoin="round"
				>
					<path d="M1 12C1 12 5 3 12 3s11 9 11 9-4 9-11 9S1 12 1 12z"></path>
					<circle cx="12" cy="12" r="3"></circle>
				</svg>
				<svg
					id="closed-eye"
					@click="show = true"
					x-bind:class="show ? 'hidden' : ''"
					class="absolute right-2 top-2 text-gray-900 dark:text-white cursor-pointer"
					xmlns="http://www.w3.org/2000/svg"
					width="24"
					height="24"
					viewBox="0 0 24 24"
					fill="none"
					stroke="currentColor"
					stroke-width="2"
					stroke-linecap="round"
					stroke-linejoin="round"
				>
					<path d="M1 12C1 12 5 21 12 21s11-9 11-9-4-9-11-9S1 12 1 12z"></path>
					<line x1="1" y1="12" x2="23" y2="12"></line>
				</svg>
			</div>
			if len(form.Error.Password) > 0 {
				<ul class="text-red-400 mt-2 list-disc list-inside">
					for _, err := range form.Error.Password {
						<li>{ err }</li>
					}
				</ul>
			}
			if form.FormError != "" {
				<p class="text-red-400">{ form.FormError }</p>
			}
		</div>
		<button
			type="submit"
			class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
		>
			Submit
		</button>
	</form>
}
